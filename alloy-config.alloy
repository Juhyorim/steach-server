// Collection: 특정 경로 사양으로 로컬 디렉토리 마운트
local.file_match "applogs" {
    // 대상 경로 설정: /tmp/app-logs/app.log 파일을 대상으로 지정
    path_targets = [{"__path__" = "/tmp/app-logs/app.log"}]
}

// Collection: 파일 매치를 입력으로 사용하여 마운트된 로그 파일 스크랩
loki.source.file "local_files" {
    // applogs에서 정의한 대상 사용
    targets    = local.file_match.applogs.targets
    // 다음 처리 단계(체인의 다음 링크)를 지정
    forward_to = [loki.process.add_new_label.receiver]
}

// Transformation: 로그 메시지에서 데이터를 추출하여 새 레이블로 변환
loki.process "add_new_label" {
    // logfmt 단계: 로그 메시지에서 'level' 필드를 추출하여 'extracted_level'로 매핑
    stage.logfmt {
        mapping = {
            "extracted_level" = "level",
        }
    }
    // 레이블 단계: 추출된 'extracted_level' 값을 'level' 레이블로 추가
    stage.labels {
        values = {
            "level" = "extracted_level",
        }
    }
    // 다음 처리 단계를 local_loki "receiver"로 지정
    forward_to = [loki.write.local_loki.receiver]
}

// 데이터 소스로 전송하기 전에 필수적이지 않은 로그를 필터링하면 로그 볼륨을 관리하여 비용을 절감하는 데 도움이 됩니다.
// 다음 예제는 Loki로 로그를 보내기 전에 로그를 필터링하거나 삭제하는 방법을 보여줍니다.

loki.process "filter_logs" {
  stage.drop {
       source = ""
       expression  = ".*Connection closed by authenticating user root"
       drop_counter_reason = "noisy"
    }
  forward_to = [loki.write.grafana_loki.receiver]
  }


// 이 컴포넌트로 들어오는 모든 데이터를 Loki 원격 API로 전송
loki.write "local_loki" {
    // Loki 엔드포인트 URL 설정
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
    }
     // basic_auth {
    //  username = "admin"
    //  password = "admin"
    // }
}
// 전체 정리:
// 이 설정은 로컬 로그 파일을 수집하고, 처리한 후 Loki로 전송하는 파이프라인을 구성합니다.
// 1. 로컬 파일 매치: 특정 로그 파일 위치 지정
// 2. 파일 소스: 지정된 로그 파일 읽기
// 3. 처리: 로그에서 레벨 정보 추출 및 레이블로 추가
// 4. Loki로 전송: 처리된 로그 데이터를 Loki API로 전송
// 이 파이프라인을 통해 로그 데이터를 효율적으로 수집, 가공, 저장할 수 있습니다.
