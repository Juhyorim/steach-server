# 이벤트 블록 - 이벤트 관련 설정을 포함
events { }

# 요청 속도 제한을 정의하는 영역 설정
# limit_req_zone 지시어를 사용하여 요청 속도 제한 설정
# 여기서는 IP 주소당 초당 3개의 요청을 허용하고, 10MB의 메모리를 사용하여 'ip_limit'이라는 이름을 지정
limit_req_zone $binary_remote_addr zone=ip_limit:10m rate=3r/s;

# HTTP 서버 관련 설정
http {

# Nginx 설정 파일에 resolver 지시어를 추가하여 Docker의 내장 DNS를 사용하도록 설정할 수 있습니다.
# 이렇게 하면 Nginx가 주기적으로 DNS를 재조회하게 되어, 나중에 steach-server와 holy-jenkins가 연결될 때 해당 호스트를 찾을 수 있게 됩니다.
    resolver 127.0.0.11 valid=30s;  # Docker의 내장 DNS 사용

    # 커스텀 로그 포맷 설정
    log_format custom_log_format '$remote_addr - $remote_user [$time_local] "$request" '
                                 'limit_req_status=$limit_req_status $status '
                                 '"$http_referer" "$http_user_agent"';

    access_log /var/log/nginx/access.log custom_log_format;

    # steach-server를 위한 업스트림 설정
    # 업스트림 서버: 'upstream' 지시어는 요청을 처리할 수 있는 백엔드 서버 풀을 정의합니다.
    upstream steach-server {
        server steach-server:8080; # steach-server 애플리케이션이 사용하는 포트 설정
        server 127.0.0.1:65535 backup;  # 더미 서버
    }

    # Jenkins를 위한 업스트림 설정
    upstream holy-jenkins {
        server holy-jenkins:8080; # Docker Compose 네트워크와 Jenkins 서비스 포트 설정
        server 127.0.0.1:65535 backup;  # 더미 서버
    }

    server {
        listen 80; # Nginx가 요청을 받을 포트 설정

# 요청된 URI에 대해 가장 구체적인 location 블록을 선택

    # location 블록의 종류 (위에서부터 우선순위가 높음)
    # 정확한 경로 매칭 (=): 요청된 경로와 정확히 일치하는 경우에만 적용됩니다.
    # 접두사 매칭 (^~): 주어진 문자열로 시작하는 경로에 대해 최우선으로 매칭합니다.
    # 정규 표현식 매칭 (~, ~*): 정규 표현식을 사용하여 매칭합니다. ~는 대소문자를 구분하고, ~*는 대소문자를 구분하지 않습니다.
    # 기본 매칭: 가장 일반적인 형태로, 주어진 문자열로 시작하는 모든 경로에 대해 매칭합니다.
        # 이 설정은 클라이언트가 http://your-jenkins-server/jenkins/...로 요청을 보낼 때, Nginx가 이를 http://holy-jenkins/jenkins/...로 프록시한다는 것
        # 깃허브 웹훅을 여기로 보내고 이 요청을 그대로 보내주면 되는건가..?
        location /github-webhook {
        # proxy_pass 지시어는 요청을 지정된 백엔드 서버로 전달합니다.
            proxy_pass http://holy-jenkins; # 요청을 holy-jenkins 애플리케이션으로 전달
        # proxy_set_header 지시어는 원본 요청의 헤더 정보를 유지하고 전달하는 데 사용됩니다.
            proxy_set_header Host $host; # 원본 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시를 통한 클라이언트 IP 주소 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 요청 프로토콜 전달
        }

        location /api {
            proxy_pass http://steach-server; # 요청을 steach-server 애플리케이션으로 전달
            proxy_set_header Host $host; # 원본 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시를 통한 클라이언트 IP 주소 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 요청 프로토콜 전달
        }

        # 2개의 요청 같이 처리 (대소문자 구분)
        location ~ ^/api/v1/(lectures/final/|check/server/operating) {
            limit_req zone=ip_limit burst=1 nodelay; # 요청 속도 제한 적용
            limit_req_status 429; # 429 (Too Many Requests) 에러 반환

            proxy_pass http://steach-server; # 요청을 steach-server 애플리케이션으로 전달
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://steach-server; # 요청을 steach-server 애플리케이션으로 전달
            proxy_set_header Host $host; # 원본 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시를 통한 클라이언트 IP 주소 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 요청 프로토콜 전달
        }
    }

    # 일반 로그 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
}

# 요청 제한 영역 설정 예시
# 특정 IP 주소에 대한 요청 제한 영역 정의
# limit_req_zone $binary_remote_addr zone=special_limit:10m rate=2r/s;

# geo 지시어를 사용하여 특정 IP 주소에 대한 특별 요청 제한 적용
# geo $limit {
#   default default_limit; # 기본적으로 default_limit 영역 사용
#   192.168.1.100 special_limit; # 192.168.1.100 IP 주소에 대해 special_limit 영역 사용
# }

# 특정 위치에서 사용 예시
# location /your_url {
#   limit_req zone=$limit burst=5 nodelay;
#   ...
# }


# 정규 표현식 매칭 (대소문자 구분 안 함)
# location ~* \.(jpg|jpeg|png|gif|ico)$ {
#      root /var/www/images;
# }

# 접두사 매칭
# location ^~ /static/ {
#     root /var/www/static;
# }
