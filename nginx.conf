events { }

http {
    log_format custom_log_format '$remote_addr - $remote_user [$time_local] "$request" '
                                 'limit_req_status=$limit_req_status $status '
                                 '"$http_referer" "$http_user_agent"';
    access_log /var/log/nginx/access.log custom_log_format;

    upstream steach-server {
        server steach-server:8080; # steach-server 애플리케이션이 사용할 포트 설정
    }

    limit_req_zone $binary_remote_addr zone=ip_limit:10m rate=5r/s;

    server {
        listen 80; # Nginx가 요청을 받을 포트 설정

        location / {
            proxy_pass http://steach-server; # 요청을 steach-server 애플리케이션으로 전달
            proxy_set_header Host $host; # 원본 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시를 통한 클라이언트 IP 주소 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 요청의 프로토콜 전달
        }

        location /api/v1/lectures/final/ {
            limit_req zone=ip_limit burst=1 nodelay; # 요청 속도 제한을 적용합니다
            proxy_pass http://steach-server; # 요청을 steach-server 애플리케이션으로 전달
            proxy_set_header Host $host; # 원본 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시를 통한 클라이언트 IP 주소 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 요청의 프로토콜 전달
        }

        location /api/v1/login {
            limit_req zone=ip_limit burst=1 nodelay; # 요청 속도 제한을 적용합니다
            proxy_pass http://steach-server; # 요청을 steach-server 애플리케이션으로 전달
            proxy_set_header Host $host; # 원본 호스트 헤더 전달
            proxy_set_header X-Real-IP $remote_addr; # 클라이언트의 IP 주소 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시를 통한 클라이언트 IP 주소 전달
            proxy_set_header X-Forwarded-Proto $scheme; # 요청의 프로토콜 전달
        }
    }
}
